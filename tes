app.php

<?php

// Client Code

require "vendor/autoload.php";

use DesignPattern\MySQLQueryBuilder;

$builder = new MySQLQueryBuilder();

# 1
$query1 = $builder->select('eteam', ['eteam.teamname', 'goal.player'])
->join('goal', 'eteam.id', 'goal.teamid')
->join('game', 'game.id', 'goal.matchid')
->where('game.team1', '=', 'POL')
->where('game.team2', '=', 'RUS')
->getSQL();

echo $query1;

echo "\n\n-------------------------\n\n";
# 2
$query2 = $builder->selectDistinct('eteam', ['eteam.coach'])
->join('goal', 'eteam.id', 'goal.teamid')
->where('player', '=', 'Mario GÃ³mez')
->getSQL();

echo $query2;

echo "\n\n-------------------------\n\n";

# 3
$query3 = $builder->select('goal', ['goal.player', 'eteam.teamname', 'eteam.coach'])
->join('eteam', 'goal.teamid', 'eteam.id')
->join('game', 'game.id', 'goal.matchid')
->where('game.mdate', '=', '15 June 2012')
->limit(0, 10)
->getSQL();

echo $query3;

echo "\n\n-------------------------\n\n";

# 4
$query4 = $builder->select('eteam', ['eteam.teamname', 'goal.gtime'])
->join('goal', 'eteam.id', 'goal.teamid')
->where('goal.gtime', '<', '10')
->orderBy('goal.gtime', 'DESC')
->getSQL();

echo $query4;

// var_dump($builder);


SQLQueryBuilder.php
<?php

namespace DesignPattern;

interface SQLQueryBuilder
{
public function select($table, $fields);
public function where($field, $value, $operator);
public function limit($start, $offset);
public function join($table, $field1, $field2);
public function orderBy($field, $order);
public function getSQL();
}

MySQLQueryBuilder.php
<?php
namespace DesignPattern;

use DesignPattern\SQLQueryBuilder;

define('QUERY_TYPE_SELECT', 'select');

class MySQLQueryBuilder implements SQLQueryBuilder
{
protected $query;

public function reset()
{
$this->query = new \stdClass();
$this->query->base = null;
$this->query->joins = [];
$this->query->type = null;
$this->query->where = [];
$this->query->limit = null;
$this->query->offset = null;
}

public function select($table, $fields)
{
$this->reset();
$this->query->base = "SELECT ";
$this->query->base .= implode(', ', $fields);
$this->query->base .= " FROM " . $table;
$this->query->type = QUERY_TYPE_SELECT;

return $this;
}

public function selectDistinct($table, $fields)
{
$this->reset();
$this->query->base = "SELECT DISTINCT ";
$this->query->base .= implode(', ', $fields);
$this->query->base .= " FROM " . $table;
$this->query->type = QUERY_TYPE_SELECT;

return $this;
}

public function where($field, $operator, $value)
{
$filter = "$field {$operator} '{$value}'";
array_push($this->query->where, $filter);

return $this;
}

public function limit($limit = null, $offset = null)
{
$this->query->limit = $limit;
$this->query->offset = $offset;

return $this;
}

public function join($table, $field1, $field2)
{
$join_expression = " JOIN {$table} ON ({$field1}={$field2})";
array_push($this->query->joins, $join_expression);

return $this;
}

public function orderBy($field, $order = 'ASC')
{
$order = strtoupper($order);
if (!in_array($order, ['ASC', 'DESC'])) {
$order = 'ASC';
}
$this->query->order[] = "$field $order";
return $this;
}

public function getSQL()
{
$query = $this->query;
$sql = $query->base;

if (!empty($query->joins)) {
$sql .= implode('', $query->joins);
}

if (!empty($query->where)) {
$sql .= " WHERE ";
$sql .= implode(' AND ', $query->where);
}

if (!is_null($query->limit)) {
$sql .= " LIMIT " . $query->limit;
}

if (!is_null($query->offset)) {
$sql .= " , " . $query->offset;
}

return $sql;
}
}